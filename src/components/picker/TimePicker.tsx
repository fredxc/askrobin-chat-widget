import { useState } from "react";

interface TimePickerProps {
  onSelect: (time: string) => void;
  onClose: () => void;
}

export function TimePicker({ onSelect, onClose }: TimePickerProps) {
  const [activeTab, setActiveTab] = useState<
    "morning" | "afternoon" | "evening"
  >("morning");

  const timeSlots = {
    morning: ["08:00 AM", "09:00 AM", "10:00 AM", "11:00 AM"],
    afternoon: ["12:00 PM", "01:00 PM", "02:00 PM", "03:00 PM"],
    evening: ["04:00 PM", "05:00 PM", "06:00 PM", "07:00 PM"],
  };

  const handleTimeSelect = (time: string) => {
    onSelect(time);
    onClose();
  };

  return (
    <div className="p-4 bg-white">
      <h2 className="text-lg font-semibold text-center mb-4">Select Time</h2>
      <div className="flex gap-2 mb-4 font-semibold">
        <button
          onClick={() => setActiveTab("morning")}
          className={`flex-1 py-2 px-4 rounded-lg flex items-center justify-center gap-2 ${
            activeTab === "morning"
              ? "text-red-500 bg-purple-50"
              : "bg-gray-100 hover:bg-gray-200"
          }`}
        >
          <svg
            width="20"
            height="16"
            viewBox="0 0 20 16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M19.2923 11.016C19.2923 11.237 19.2045 11.449 19.0482 11.6053C18.892 11.7615 18.68 11.8493 18.459 11.8493H1.79232C1.5713 11.8493 1.35934 11.7615 1.20306 11.6053C1.04678 11.449 0.958984 11.237 0.958984 11.016C0.958984 10.795 1.04678 10.583 1.20306 10.4268C1.35934 10.2705 1.5713 10.1827 1.79232 10.1827H18.459C18.68 10.1827 18.892 10.2705 19.0482 10.4268C19.2045 10.583 19.2923 10.795 19.2923 11.016ZM15.1256 15.1827C15.3467 15.1827 15.5586 15.0949 15.7149 14.9386C15.8712 14.7823 15.959 14.5704 15.959 14.3493C15.959 14.1283 15.8712 13.9164 15.7149 13.7601C15.5586 13.6038 15.3467 13.516 15.1256 13.516H5.12565C4.90464 13.516 4.69268 13.6038 4.5364 13.7601C4.38011 13.9164 4.29232 14.1283 4.29232 14.3493C4.29232 14.5704 4.38011 14.7823 4.5364 14.9386C4.69268 15.0949 4.90464 15.1827 5.12565 15.1827H15.1256ZM5.95898 7.68268C5.95898 7.90369 6.04678 8.11565 6.20306 8.27193C6.35934 8.42821 6.5713 8.51601 6.79232 8.51601C7.01333 8.51601 7.22529 8.42821 7.38157 8.27193C7.53785 8.11565 7.62565 7.90369 7.62565 7.68268C7.62565 7.01964 7.88904 6.38375 8.35788 5.91491C8.82672 5.44607 9.46261 5.18268 10.1257 5.18268C10.7887 5.18268 11.4246 5.44607 11.8934 5.91491C12.3623 6.38375 12.6256 7.01964 12.6257 7.68268C12.6257 7.90369 12.7134 8.11565 12.8697 8.27193C13.026 8.42821 13.238 8.51601 13.459 8.51601C13.68 8.51601 13.892 8.42821 14.0482 8.27193C14.2045 8.11565 14.2923 7.90369 14.2923 7.68268C14.2923 6.57761 13.8533 5.5178 13.0719 4.7364C12.2905 3.955 11.2307 3.51601 10.1257 3.51601C9.02058 3.51601 7.96077 3.955 7.17937 4.7364C6.39797 5.5178 5.95898 6.57761 5.95898 7.68268ZM9.29232 1.84934C9.29232 2.07036 9.38011 2.28232 9.5364 2.4386C9.69267 2.59488 9.90464 2.68268 10.1257 2.68268C10.3467 2.68268 10.5586 2.59488 10.7149 2.4386C10.8712 2.28232 10.959 2.07036 10.959 1.84934V1.01601C10.959 0.794998 10.8712 0.583036 10.7149 0.426756C10.5586 0.270476 10.3467 0.182678 10.1257 0.182678C9.90464 0.182678 9.69267 0.270476 9.5364 0.426756C9.38011 0.583036 9.29232 0.794998 9.29232 1.01601V1.84934ZM15.1256 7.68268C15.1256 7.90369 15.2134 8.11565 15.3697 8.27193C15.526 8.42821 15.738 8.51601 15.959 8.51601H16.7923C17.0133 8.51601 17.2253 8.42821 17.3816 8.27193C17.5379 8.11565 17.6256 7.90369 17.6256 7.68268C17.6256 7.46166 17.5379 7.2497 17.3816 7.09342C17.2253 6.93714 17.0133 6.84934 16.7923 6.84934H15.959C15.738 6.84934 15.526 6.93714 15.3697 7.09342C15.2134 7.2497 15.1256 7.46166 15.1256 7.68268ZM3.45898 6.84934C3.23797 6.84934 3.02601 6.93714 2.86973 7.09342C2.71345 7.2497 2.62565 7.46166 2.62565 7.68268C2.62565 7.90369 2.71345 8.11565 2.86973 8.27193C3.02601 8.42821 3.23797 8.51601 3.45898 8.51601H4.29232C4.51333 8.51601 4.72529 8.42821 4.88157 8.27193C5.03785 8.11565 5.12565 7.90369 5.12565 7.68268C5.12565 7.46166 5.03785 7.2497 4.88157 7.09342C4.72529 6.93714 4.51333 6.84934 4.29232 6.84934H3.45898ZM4.82232 2.37934C4.66609 2.53562 4.57833 2.74754 4.57833 2.96851C4.57833 3.18948 4.66609 3.40141 4.82232 3.55768L5.41148 4.14684C5.56865 4.29864 5.77915 4.38264 5.99765 4.38074C6.21615 4.37884 6.42516 4.2912 6.57967 4.13669C6.73417 3.98219 6.82181 3.77318 6.82371 3.55468C6.82561 3.33618 6.74162 3.12568 6.58982 2.96851L6.00065 2.37934C5.84438 2.22312 5.63245 2.13536 5.41148 2.13536C5.19051 2.13536 4.97859 2.22312 4.82232 2.37934ZM14.2507 2.37934L13.6615 2.96851C13.5819 3.04538 13.5184 3.13734 13.4747 3.23901C13.4311 3.34068 13.4081 3.45003 13.4071 3.56068C13.4061 3.67133 13.4272 3.78106 13.4691 3.88347C13.511 3.98589 13.5729 4.07893 13.6512 4.15717C13.7294 4.23542 13.8224 4.2973 13.9249 4.3392C14.0273 4.3811 14.137 4.40218 14.2477 4.40122C14.3583 4.40026 14.4677 4.37727 14.5693 4.3336C14.671 4.28992 14.7629 4.22644 14.8398 4.14684L15.429 3.55768C15.5086 3.48081 15.5721 3.38885 15.6157 3.28718C15.6594 3.18551 15.6824 3.07616 15.6834 2.96551C15.6843 2.85486 15.6632 2.74513 15.6213 2.64272C15.5794 2.5403 15.5176 2.44726 15.4393 2.36902C15.3611 2.29077 15.268 2.22889 15.1656 2.18699C15.0632 2.14509 14.9535 2.12401 14.8428 2.12497C14.7322 2.12593 14.6228 2.14892 14.5211 2.19259C14.4195 2.23627 14.3275 2.29975 14.2507 2.37934Z"
              fill={`${activeTab === "morning" ? "#FF3333" : "black"}`}
            />
          </svg>
          Morning
        </button>
        <button
          onClick={() => setActiveTab("afternoon")}
          className={`flex-1 py-2 px-4 rounded-lg flex items-center justify-center gap-2 ${
            activeTab === "afternoon"
              ? "text-red-500 bg-purple-50"
              : "bg-gray-100 hover:bg-gray-200"
          }`}
        >
          <svg
            width="17"
            height="17"
            viewBox="0 0 17 17"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M8.6098 1.36584V2.17883M8.6098 15.1865V15.9995M2.10595 8.68268H1.29297M3.98729 4.06016L3.32542 3.3983M13.2323 4.06016L13.8942 3.3983M3.98729 13.3085L3.32542 13.9671M13.2323 13.3085L13.8942 13.9671M15.9266 8.68268H15.1137M11.8617 8.68268C11.8617 10.4786 10.4058 11.9346 8.6098 11.9346C6.81381 11.9346 5.35788 10.4786 5.35788 8.68268C5.35788 6.88669 6.81381 5.43075 8.6098 5.43075C10.4058 5.43075 11.8617 6.88669 11.8617 8.68268Z"
              stroke={`${activeTab === "afternoon" ? "#FF3333" : "black"}`}
            />
          </svg>
          Afternoon
        </button>
        <button
          onClick={() => setActiveTab("evening")}
          className={`flex-1 py-2 px-4 rounded-lg flex items-center justify-center gap-2 ${
            activeTab === "evening"
              ? "text-red-500 bg-purple-50"
              : "bg-gray-100 hover:bg-gray-200"
          }`}
        >
          <svg
            width="20"
            height="13"
            viewBox="0 0 20 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M19.2591 8.34937C19.2591 8.57038 19.1713 8.78234 19.015 8.93862C18.8588 9.0949 18.6468 9.1827 18.4258 9.1827H1.75911C1.5381 9.1827 1.32614 9.0949 1.16986 8.93862C1.01358 8.78234 0.925781 8.57038 0.925781 8.34937C0.925781 8.12835 1.01358 7.91639 1.16986 7.76011C1.32614 7.60383 1.5381 7.51603 1.75911 7.51603H18.4258C18.6468 7.51603 18.8588 7.60383 19.015 7.76011C19.1713 7.91639 19.2591 8.12835 19.2591 8.34937ZM15.0924 12.516C15.3135 12.516 15.5254 12.4282 15.6817 12.272C15.838 12.1157 15.9258 11.9037 15.9258 11.6827C15.9258 11.4617 15.838 11.2497 15.6817 11.0934C15.5254 10.9372 15.3135 10.8494 15.0924 10.8494H5.09245C4.87143 10.8494 4.65947 10.9372 4.50319 11.0934C4.34691 11.2497 4.25911 11.4617 4.25911 11.6827C4.25911 11.9037 4.34691 12.1157 4.50319 12.272C4.65947 12.4282 4.87143 12.516 5.09245 12.516H15.0924ZM5.92578 5.01603C5.92578 5.23705 6.01358 5.44901 6.16986 5.60529C6.32614 5.76157 6.5381 5.84937 6.75911 5.84937C6.98013 5.84937 7.19209 5.76157 7.34837 5.60529C7.50465 5.44901 7.59245 5.23705 7.59245 5.01603C7.59245 4.35299 7.85584 3.71711 8.32468 3.24826C8.79352 2.77942 9.42941 2.51603 10.0924 2.51603C10.7555 2.51603 11.3914 2.77942 11.8602 3.24826C12.3291 3.71711 12.5924 4.35299 12.5924 5.01603C12.5924 5.23705 12.6802 5.44901 12.8365 5.60529C12.9928 5.76157 13.2048 5.84937 13.4258 5.84937C13.6468 5.84937 13.8588 5.76157 14.015 5.60529C14.1713 5.44901 14.2591 5.23705 14.2591 5.01603C14.2591 3.91096 13.8201 2.85116 13.0387 2.06975C12.2573 1.28835 11.1975 0.849365 10.0924 0.849365C8.98738 0.849365 7.92757 1.28835 7.14617 2.06975C6.36477 2.85116 5.92578 3.91096 5.92578 5.01603Z"
              fill={`${activeTab === "evening" ? "#FF3333" : "black"}`}
            />
          </svg>
          Evening
        </button>
      </div>
      <div className="space-y-2">
        {timeSlots[activeTab].map((time) => (
          <button
            key={time}
            onClick={() => handleTimeSelect(time)}
            className="w-full py-3 px-4 border text-left font-semibold rounded-lg hover:shadow-md hover:border-red-300 flex items-center justify-between transition duration-300"
          >
            <span>{time}</span>
            <span>Available</span>
          </button>
        ))}
      </div>
    </div>
  );
}
